name: Typebot CI

'on':
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_BUILDER_REPOSITORY: typebot-builder
  ECR_VIEWER_REPOSITORY: typebot-viewer
  ECR_REGISTRY: 585814034319.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials production
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CI_EKS_PRODUCTION_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CI_EKS_PRODUCTION_SECRET }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Compute version
        uses: cloudhumans/actions/app-version@v1
        with:
          version_file: version
          format: '{base}-{sha7}'

      - name: Build, tag, and push BUILDER image to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG --build-arg SCOPE=builder .
          docker push $ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push VIEWER image to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG --build-arg SCOPE=viewer .
          docker push $ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG

      - name: install kubectl and kustomize
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          curl -sfLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.1.1/kustomize_v4.1.1_linux_amd64.tar.gz && tar -xvf kustomize.tar.gz && chmod u+x kustomize
          curl -LO "https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl" && chmod u+x kubectl

      - name: export common variables
        run: |
          echo "KUSTOMIZE_CMD=$PWD/kustomize" >> $GITHUB_ENV
          echo "KUBECTL_CMD=$PWD/kubectl" >> $GITHUB_ENV

      - name: Deploy in production
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          pushd deploy/base
          $KUSTOMIZE_CMD edit set image typebot-builder-image="$ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG"
          $KUSTOMIZE_CMD edit set image typebot-viewer-image="$ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG"
          popd
          aws eks --region us-east-1 update-kubeconfig --name kubernetes-production
          $KUSTOMIZE_CMD build deploy/overlays/prd
          $KUSTOMIZE_CMD build deploy/overlays/prd | $KUBECTL_CMD apply -f -

      - name: Deploy instace2 in production
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          pushd deploy/base
          $KUSTOMIZE_CMD edit set image typebot-builder-image="$ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG"
          $KUSTOMIZE_CMD edit set image typebot-viewer-image="$ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG"
          popd
          aws eks --region us-east-1 update-kubeconfig --name kubernetes-production
          $KUSTOMIZE_CMD build deploy/overlays/prd-instance2
          $KUSTOMIZE_CMD build deploy/overlays/prd-instance2 | $KUBECTL_CMD apply -f -
