/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as OssFriendsImport } from './routes/oss-friends'
import { Route as AboutImport } from './routes/about'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutTermsOfServiceImport } from './routes/_layout/terms-of-service'
import { Route as LayoutPricingImport } from './routes/_layout/pricing'
import { Route as LayoutBlogIndexImport } from './routes/_layout/blog/index'
import { Route as LayoutBlogSlugImport } from './routes/_layout/blog/$slug'

// Create/Update Routes

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const OssFriendsRoute = OssFriendsImport.update({
  id: '/oss-friends',
  path: '/oss-friends',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutTermsOfServiceRoute = LayoutTermsOfServiceImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPricingRoute = LayoutPricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutBlogIndexRoute = LayoutBlogIndexImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutBlogSlugRoute = LayoutBlogSlugImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/oss-friends': {
      id: '/oss-friends'
      path: '/oss-friends'
      fullPath: '/oss-friends'
      preLoaderRoute: typeof OssFriendsImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/pricing': {
      id: '/_layout/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof LayoutPricingImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/terms-of-service': {
      id: '/_layout/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof LayoutTermsOfServiceImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/blog/$slug': {
      id: '/_layout/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof LayoutBlogSlugImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/blog/': {
      id: '/_layout/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LayoutBlogIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutPricingRoute: typeof LayoutPricingRoute
  LayoutTermsOfServiceRoute: typeof LayoutTermsOfServiceRoute
  LayoutBlogSlugRoute: typeof LayoutBlogSlugRoute
  LayoutBlogIndexRoute: typeof LayoutBlogIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutPricingRoute: LayoutPricingRoute,
  LayoutTermsOfServiceRoute: LayoutTermsOfServiceRoute,
  LayoutBlogSlugRoute: LayoutBlogSlugRoute,
  LayoutBlogIndexRoute: LayoutBlogIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/oss-friends': typeof OssFriendsRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/pricing': typeof LayoutPricingRoute
  '/terms-of-service': typeof LayoutTermsOfServiceRoute
  '/blog/$slug': typeof LayoutBlogSlugRoute
  '/blog': typeof LayoutBlogIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/oss-friends': typeof OssFriendsRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/pricing': typeof LayoutPricingRoute
  '/terms-of-service': typeof LayoutTermsOfServiceRoute
  '/blog/$slug': typeof LayoutBlogSlugRoute
  '/blog': typeof LayoutBlogIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/oss-friends': typeof OssFriendsRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/_layout/pricing': typeof LayoutPricingRoute
  '/_layout/terms-of-service': typeof LayoutTermsOfServiceRoute
  '/_layout/blog/$slug': typeof LayoutBlogSlugRoute
  '/_layout/blog/': typeof LayoutBlogIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/oss-friends'
    | '/privacy-policy'
    | '/pricing'
    | '/terms-of-service'
    | '/blog/$slug'
    | '/blog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/oss-friends'
    | '/privacy-policy'
    | '/pricing'
    | '/terms-of-service'
    | '/blog/$slug'
    | '/blog'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/about'
    | '/oss-friends'
    | '/privacy-policy'
    | '/_layout/pricing'
    | '/_layout/terms-of-service'
    | '/_layout/blog/$slug'
    | '/_layout/blog/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
  OssFriendsRoute: typeof OssFriendsRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AboutRoute: AboutRoute,
  OssFriendsRoute: OssFriendsRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/about",
        "/oss-friends",
        "/privacy-policy"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/pricing",
        "/_layout/terms-of-service",
        "/_layout/blog/$slug",
        "/_layout/blog/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/oss-friends": {
      "filePath": "oss-friends.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/_layout/pricing": {
      "filePath": "_layout/pricing.tsx",
      "parent": "/_layout"
    },
    "/_layout/terms-of-service": {
      "filePath": "_layout/terms-of-service.tsx",
      "parent": "/_layout"
    },
    "/_layout/blog/$slug": {
      "filePath": "_layout/blog/$slug.tsx",
      "parent": "/_layout"
    },
    "/_layout/blog/": {
      "filePath": "_layout/blog/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
